name: Build

on:
 workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Checkout
        uses: actions/checkout@v2
        
      #----------------------------------------------
      #       install and configure poetry
      #----------------------------------------------
      
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
        
      - uses: patrick91/setup-python@feature/poetry-caching
        with:
          python-version: 3.8
          cache: 'poetry'
          cache-dependency-path: pyproject.toml
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
#       - name: Load cached venv
#         id: cached-poetry-dependencies
#         uses: actions/cache@v2
#         with:
#           path: .venv
#           key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run Tests
        run: poetry run coverage run -m pytest
      - name: Generate Reports
        run: poetry run coverage report
      #----------------------------------------------
      #             upload coverage stats
      #----------------------------------------------
      - name: Upload coverage
        run: poetry run codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  lint:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      
      - name: Checkout
        uses: actions/checkout@v2
      
      #----------------------------------------------
      #       install and configure poetry
      #----------------------------------------------
      
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
        
      - uses: patrick91/setup-python@feature/poetry-caching
        with:
          python-version: 3.8
          cache: 'poetry'
          cache-dependency-path: pyproject.toml

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
#       - name: Load cached venv
#         id: cached-poetry-dependencies
#         uses: actions/cache@v2
#         with:
#           path: .venv
#           key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      #----------------------------------------------
      #                run linters
      #----------------------------------------------
      - name: Black
        run: poetry run black . --check
      - name: mypy
        run: poetry run mypy ./src
      - name: flake 8
        run: poetry run flake8 . --count --statistics

  publish:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs:
      - test
      - lint
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Checkout
        uses: actions/checkout@v2
    
      #----------------------------------------------
      #       install and configure poetry
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
    
      - uses: patrick91/setup-python@feature/poetry-caching
        with:
          python-version: 3.8
          cache: 'poetry'
          cache-dependency-path: pyproject.toml

      #----------------------------------------------
      #       Publish Library
      #----------------------------------------------
      - run: |
          poetry build
          poetry publish --username __token__ --password ${{ secrets.PYPI_API_TOKEN }}
